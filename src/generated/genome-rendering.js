// @generated by protobuf-ts 2.9.1 with parameter output_javascript
// @generated from protobuf file "genome-rendering.proto" (package "kromosynthrendering", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.1 with parameter output_javascript
// @generated from protobuf file "genome-rendering.proto" (package "kromosynthrendering", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class RenderRequest$Type extends MessageType {
    constructor() {
        super("kromosynthrendering.RenderRequest", [
            { no: 1, name: "genomeStringUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "noteDelta", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "velocity", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "reverse", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "useOvertoneInharmonicityFactors", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { genomeStringUrl: "", duration: 0, noteDelta: 0, velocity: 0, reverse: false, useOvertoneInharmonicityFactors: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string genomeStringUrl */ 1:
                    message.genomeStringUrl = reader.string();
                    break;
                case /* float duration */ 2:
                    message.duration = reader.float();
                    break;
                case /* float noteDelta */ 3:
                    message.noteDelta = reader.float();
                    break;
                case /* float velocity */ 4:
                    message.velocity = reader.float();
                    break;
                case /* bool reverse */ 5:
                    message.reverse = reader.bool();
                    break;
                case /* bool useOvertoneInharmonicityFactors */ 6:
                    message.useOvertoneInharmonicityFactors = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string genomeStringUrl = 1; */
        if (message.genomeStringUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.genomeStringUrl);
        /* float duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Bit32).float(message.duration);
        /* float noteDelta = 3; */
        if (message.noteDelta !== 0)
            writer.tag(3, WireType.Bit32).float(message.noteDelta);
        /* float velocity = 4; */
        if (message.velocity !== 0)
            writer.tag(4, WireType.Bit32).float(message.velocity);
        /* bool reverse = 5; */
        if (message.reverse !== false)
            writer.tag(5, WireType.Varint).bool(message.reverse);
        /* bool useOvertoneInharmonicityFactors = 6; */
        if (message.useOvertoneInharmonicityFactors !== false)
            writer.tag(6, WireType.Varint).bool(message.useOvertoneInharmonicityFactors);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kromosynthrendering.RenderRequest
 */
export const RenderRequest = new RenderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RenderResponse$Type extends MessageType {
    constructor() {
        super("kromosynthrendering.RenderResponse", [
            { no: 1, name: "audio", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = { audio: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes audio */ 1:
                    message.audio = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes audio = 1; */
        if (message.audio.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.audio);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kromosynthrendering.RenderResponse
 */
export const RenderResponse = new RenderResponse$Type();
/**
 * @generated ServiceType for protobuf service kromosynthrendering.KromosynthRendering
 */
export const KromosynthRendering = new ServiceType("kromosynthrendering.KromosynthRendering", [
    { name: "RenderGenome", serverStreaming: true, options: {}, I: RenderRequest, O: RenderResponse }
]);
